#!/usr/bin/env python

import pickle
import subprocess
import argparse
import json

from jira import JIRA as jira_construct


def get_jira():
    auth = (
        'josip.janzic@insided.com',
        str(subprocess.check_output(['pass', 'atlassian/token/josip.janzic@insided.com']).decode()).split('\n')[0])
    return jira_construct('https://insidedhq.atlassian.net', basic_auth=auth)


def load_issues():
    query = '''
project IN ("USER")
AND status!=Closed
ORDER BY sprint, Rank
    '''

# AND sprint IN openSprints()
    jira = get_jira()
    results = jira.search_issues(
        query, maxResults=150,
        # fields=['summary, assignee, status, issuetype'],
        json_result=True)
    with open('/tmp/{}_cache'.format(__file__.split('/')[-1]), 'wb') as f:
        pickle.dump(results, f)
    return results


user_colors = {'BLACK': '\x1b[30m',
               'LIGHTBLACK_EX': '\x1b[90m',
               'LIGHTBLUE_EX': '\x1b[94m',
               'LIGHTCYAN_EX': '\x1b[96m',
               'LIGHTGREEN_EX': '\x1b[92m',
               'LIGHTMAGENTA_EX': '\x1b[95m',
               'LIGHTRED_EX': '\x1b[91m',
               'LIGHTWHITE_EX': '\x1b[97m',
               'LIGHTYELLOW_EX': '\x1b[93m',
               'BLUE': '\x1b[34m',
               'CYAN': '\x1b[36m',
               'GREEN': '\x1b[32m',
               'MAGENTA': '\x1b[35m',
               'RED': '\x1b[31m',
               'WHITE': '\x1b[37m',
               'YELLOW': '\x1b[33m'}

progress_colors = {'BLACK': '\x1b[30m',
                   'BLACK': '\x1b[30m',
                   'LIGHTBLACK_EX': '\x1b[90m',
                   'LIGHTBLUE_EX': '\x1b[94m',
                   'LIGHTCYAN_EX': '\x1b[96m',
                   'LIGHTGREEN_EX': '\x1b[92m',
                   'LIGHTMAGENTA_EX': '\x1b[95m',
                   'LIGHTRED_EX': '\x1b[91m',
                   'LIGHTWHITE_EX': '\x1b[97m',
                   'LIGHTYELLOW_EX': '\x1b[93m',
                   'WHITE': '\x1b[37m',
                   'BLUE': '\x1b[34m',
                   'CYAN': '\x1b[36m',
                   'GREEN': '\x1b[32m',
                   'MAGENTA': '\x1b[35m',
                   'RED': '\x1b[31m',
                   'YELLOW': '\x1b[33m'
                   }

reset = '\x1b[39m'

taken_colors = dict()


def status_color(string):
    try:
        return taken_colors[string]
    except KeyError:
        taken_colors[string] = progress_colors.popitem()[1]
        return taken_colors[string]


def color(string):
    try:
        return taken_colors[string]
    except KeyError:
        taken_colors[string] = user_colors.popitem()[1]
        return taken_colors[string]


def main(skip_cache, all_tickets, no_summary):
    if skip_cache:
        load_issues()

    try:
        with open('/tmp/{}_cache'.format(__file__.split('/')[-1]), 'rb') as f:
            results = pickle.load(f)
    except (FileNotFoundError, EOFError):
        results = load_issues()

    for i in results['issues']:
        # print(i['fields'].get('customfield_10101', ''))
        # continue
        if not all_tickets:
            if i['fields']['customfield_10007'] is None:
                continue
            if 'state=ACTIVE' not in i['fields']['customfield_10007'][0]:
                continue

        assignee = i['fields']['assignee']['displayName'].split(
            ' ')[0] if i['fields']['assignee'] else ''
        status = i['fields']['status']['name'].replace('Ready for ', '').replace('Development', 'Todo')
        print('{key:<9} {status_color}{status:<11}{reset} {assigne_color}{assignee:<10}{reset} {summary} {label} {type}\t{description}'.format(
            summary=i['fields']['summary'],
            assignee=assignee,
            status=status,
            key=i['key'],
            description='' if no_summary else json.dumps(i['fields']['description']),
            type=i['fields']['issuetype']['name'],
            label='<' + ','.join(i['fields']['labels']) + '>' if i['fields']['labels'] else '',
            reset=reset,
            status_color=status_color(status),
            assigne_color=color(assignee) if assignee else '',
        ))


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('action', default='list', choices=['list', 'test-plan', 'comment', 'get-transitions', 'transition'])
    parser.add_argument('--skip-cache', action='store_true')
    parser.add_argument('--all-tickets', action='store_true')
    parser.add_argument('--no-summary', action='store_true')
    parser.add_argument('--issue', '-i')
    parser.add_argument('--test-plan', '-p')
    parser.add_argument('--comment', '-c')
    parser.add_argument('--transition', '-t')

    args = parser.parse_args()

    if args.action == 'list':
        main(args.skip_cache, args.all_tickets, args.no_summary)

    elif args.action == 'test-plan' and args.issue and args.test_plan:
        issue = get_jira().issue(args.issue)
        issue.update(fields={'customfield_10101': args.test_plan})

    elif args.action == 'comment' and args.issue and args.comment:
        get_jira().add_comment(args.issue, args.comment)

    elif args.action == 'get-transitions' and args.issue:
        jira = get_jira()
        transitions = jira.transitions(jira.issue(args.issue))
        print(', '.join(t['name'] for t in transitions))

    elif args.action == 'transition' and args.issue and args.transition:
        jira = get_jira()
        issue = jira.issue(args.issue)
        transitions = jira.transitions(issue)
        for t in transitions:
            if t['name'] == args.transition:
                jira.transition_issue(issue, t['id'])

#!/usr/bin/env python

import pickle
import subprocess
import argparse
import json

from jira import JIRA


def load_issues():
    query = '''
project=GREEN
AND status!=Close
AND issueType != "Sub-task"
AND (sprint NOT IN closedSprints() OR sprint is empty AND status NOT IN ("Ready for Refinement", "Open"))
ORDER BY sprint, status, assignee, Rank
    '''

# AND sprint IN openSprints()

    auth = (
        'josip.janzic@insided.com',
        str(subprocess.check_output(['pass', 'atlassian/josip.janzic@insided.com']).decode()).split('\n')[0])
    jira = JIRA('https://insidedhq.atlassian.net/', auth=auth)
    results = jira.search_issues(
        query, maxResults=150,
        # fields=['summary, assignee, status, issuetype'],
        json_result=True)
    with open('/tmp/{}_cache'.format(__file__.split('/')[-1]), 'wb') as f:
        pickle.dump(results, f)
    return results


user_colors = {'BLACK': '\x1b[30m',
               'LIGHTBLACK_EX': '\x1b[90m',
               'LIGHTBLUE_EX': '\x1b[94m',
               'LIGHTCYAN_EX': '\x1b[96m',
               'LIGHTGREEN_EX': '\x1b[92m',
               'LIGHTMAGENTA_EX': '\x1b[95m',
               'LIGHTRED_EX': '\x1b[91m',
               'LIGHTWHITE_EX': '\x1b[97m',
               'LIGHTYELLOW_EX': '\x1b[93m',
               'BLUE': '\x1b[34m',
               'CYAN': '\x1b[36m',
               'GREEN': '\x1b[32m',
               'MAGENTA': '\x1b[35m',
               'RED': '\x1b[31m',
               'WHITE': '\x1b[37m',
               'YELLOW': '\x1b[33m'}

progress_colors = {  # 'BLACK': '\x1b[30m',
    'LIGHTBLACK_EX': '\x1b[90m',
    'LIGHTBLUE_EX': '\x1b[94m',
    'LIGHTCYAN_EX': '\x1b[96m',
    'LIGHTGREEN_EX': '\x1b[92m',
    'LIGHTMAGENTA_EX': '\x1b[95m',
    'LIGHTRED_EX': '\x1b[91m',
                   # 'LIGHTWHITE_EX': '\x1b[97m',
                   # 'LIGHTYELLOW_EX': '\x1b[93m',
                   # 'WHITE': '\x1b[37m',
                   # 'BLUE': '\x1b[34m',
                   # 'CYAN': '\x1b[36m',
                   # 'GREEN': '\x1b[32m',
                   # 'MAGENTA': '\x1b[35m',
                   # 'RED': '\x1b[31m',
                   # 'YELLOW': '\x1b[33m'
}

reset = '\x1b[39m'

taken_colors = dict()


def status_color(string):
    try:
        return taken_colors[string]
    except KeyError:
        taken_colors[string] = progress_colors.popitem()[1]
        return taken_colors[string]


def color(string):
    try:
        return taken_colors[string]
    except KeyError:
        taken_colors[string] = user_colors.popitem()[1]
        return taken_colors[string]


def main(skip_cache):
    if skip_cache:
        load_issues()

    try:
        with open('/tmp/{}_cache'.format(__file__.split('/')[-1]), 'rb') as f:
            results = pickle.load(f)
    except (FileNotFoundError, EOFError):
        results = load_issues()

    for i in results['issues']:
        # print(i['fields'].keys())
        assignee = i['fields']['assignee']['displayName'].split(
            ' ')[0] if i['fields']['assignee'] else ''
        status = i['fields']['status']['name'].replace('Ready for ', '').replace('Development', 'Todo')
        print('{key} {status_color}{status:<11}{reset} {assigne_color}{assignee:<10}{reset} {summary} {type}\t{description}'.format(
            summary=i['fields']['summary'],
            assignee=assignee,
            status=status,
            key=i['key'],
            description=json.dumps(i['fields']['description']),
            type=i['fields']['issuetype']['name'],
            reset=reset,
            status_color=status_color(status),
            assigne_color=color(assignee) if assignee else '',
        ))


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--skip-cache', action='store_true')
    args = parser.parse_args()

    main(args.skip_cache)
